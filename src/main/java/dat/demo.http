### 1. Test endpoint - no auth needed
GET {{url}}/auth/test/

> {%
    client.test("Test endpoint accessible", function () {
        client.assert(response.status === 200, "Test endpoint failed");
    });
%}

### 2. Populate with test data
GET {{url}}/games/populate/

> {%
    client.test("Database populated", function () {
        client.assert(response.status === 200, "Population failed");
    });
%}

### 3. Register new user
POST {{url}}/auth/register/
Content-Type: application/json

{
  "username": "gamer",
  "password": "game123"
}

> {%
    client.test("User registration", function () {
        client.assert(response.status === 200 || response.status === 201, "Registration failed");
    });
%}

### 4. Login and get JWT token
POST {{url}}/auth/login/
Content-Type: application/json

{
  "username": "gamer",
  "password": "game123"
}

> {%
    client.test("Login successful", function () {
        client.assert(response.status === 200, "Login failed");
        client.assert(response.body.token, "No token received");
        client.global.set("jwt_token", response.body.token);
        client.log("JWT Token: " + client.global.get("jwt_token"));
    });
%}

### 5. Add admin role to user
POST {{url}}/auth/user/addrole/
Authorization: Bearer {{jwt_token}}
Content-Type: application/json

{
  "role": "admin"
}

> {%
    client.test("Role added successfully", function () {
        client.assert(response.status === 200, "Role addition failed");
    });
%}

### GAME API ###
### 6. Get all games
GET {{url}}/games/
Authorization: Bearer {{jwt_token}}

> {%
    client.test("Get all games", function () {
        client.assert(response.status === 200, "Failed to get games");
        client.assert(response.body.length > 0, "No games returned");
    });
%}

### 7. Get specific game
GET {{url}}/games/1
Authorization: Bearer {{jwt_token}}

> {%
    client.test("Get specific game", function () {
        client.assert(response.status === 200, "Failed to get game");
        client.assert(response.body.id === 1, "Wrong game returned");
    });
%}

### 8. Create new game
POST {{url}}/games/
Authorization: Bearer {{jwt_token}}
Content-Type: application/json

{
  "name": "Counter-Strike 3"
}

> {%
    client.test("Game created", function () {
        client.assert(response.status === 201, "Game creation failed");
        client.global.set("new_game_id", response.body.id);
    });
%}

### 9. Update game
PUT {{url}}/games/1
Authorization: Bearer {{jwt_token}}
Content-Type: application/json

{
  "name": "CS2 Updated"
}

> {%
    client.test("Game updated", function () {
        client.assert(response.status === 200, "Game update failed");
    });
%}

### 10. Delete game
DELETE {{url}}/games/1
Authorization: Bearer {{jwt_token}}

> {%
    client.test("Game deleted", function () {
        client.assert(response.status === 200 || response.status === 204, "Game deletion failed");
    });
%}

### GUN API ###
### 11. Get all guns
GET {{url}}/guns/
Authorization: Bearer {{jwt_token}}

### 12. Get random gun by game
GET {{url}}/guns/random/game/2
Authorization: Bearer {{jwt_token}}

### MAP API ###
### 13. Get all maps
GET {{url}}/maps/
Authorization: Bearer {{jwt_token}}

### 14. Get map with strategies
GET {{url}}/maps/1/with-strategies
Authorization: Bearer {{jwt_token}}

### STRATEGY API ###
### 15. Get strategies by map
GET {{url}}/strategies/map/1
Authorization: Bearer {{jwt_token}}

### 16. Get random strategy by map and type
GET {{url}}/strategies/random/map/1
Authorization: Bearer {{jwt_token}}